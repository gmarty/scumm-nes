{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,GCaA,IAAM,EAAW,AAbI,CAAA,SAEf,EADJ,IAAM,EAAW,MAAM,KAEvB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAK,IAAK,CAC5B,EAAI,EACJ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,EAAI,AAAI,EAAJ,EAAQ,WAAc,IAAM,EAAK,IAAM,CAE7C,CAAA,CAAQ,CAAC,EAAE,CAAG,CAChB,CACA,OAAO,CACT,CAAA,IAYA,IAAA,EARc,AAAC,IACb,IAAI,EAAM,GACV,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,UAAU,CAAE,IACvC,EAAO,IAAQ,EAAK,CAAQ,CAAE,AAAA,CAAA,EAAM,EAAS,QAAQ,CAAC,EAAA,EAAM,IAAK,CAEnE,MAAO,AAAC,CAAA,AAAM,GAAN,CAAM,IAAQ,CACxB,C","sources":["<anon>","src/lib/crc32.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire3956\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"axHDN\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $7aced69f17841287$export$2e2bcd8739ae039);\nconst $7aced69f17841287$var$makeCRCTable = ()=>{\n    const crcTable = Array(256);\n    let c;\n    for(let n = 0; n < 256; n++){\n        c = n;\n        for(let k = 0; k < 8; k++)c = c & 1 ? 0xedb88320 ^ c >>> 1 : c >>> 1;\n        crcTable[n] = c;\n    }\n    return crcTable;\n};\nconst $7aced69f17841287$var$crcTable = $7aced69f17841287$var$makeCRCTable();\nconst $7aced69f17841287$var$crc32 = (dataView)=>{\n    let crc = -1;\n    for(let i = 0; i < dataView.byteLength; i++)crc = crc >>> 8 ^ $7aced69f17841287$var$crcTable[(crc ^ dataView.getUint8(i)) & 0xff];\n    return (crc ^ -1) >>> 0;\n};\nvar $7aced69f17841287$export$2e2bcd8739ae039 = $7aced69f17841287$var$crc32;\n\n});\n\n\n//# sourceMappingURL=crc32.112c7aec.js.map\n","const makeCRCTable = () => {\n  const crcTable = Array(256);\n  let c;\n  for (let n = 0; n < 256; n++) {\n    c = n;\n    for (let k = 0; k < 8; k++) {\n      c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n    }\n    crcTable[n] = c;\n  }\n  return crcTable;\n};\n\nconst crcTable = makeCRCTable();\n\nconst crc32 = (dataView) => {\n  let crc = 0 ^ -1;\n  for (let i = 0; i < dataView.byteLength; i++) {\n    crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xff];\n  }\n  return (crc ^ -1) >>> 0;\n};\n\nexport default crc32;\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$7aced69f17841287$export$2e2bcd8739ae039","set","s","enumerable","configurable","$7aced69f17841287$var$crcTable","$7aced69f17841287$var$makeCRCTable","c","crcTable","Array","n","k","dataView","crc","i","byteLength","getUint8"],"version":3,"file":"crc32.112c7aec.js.map"}